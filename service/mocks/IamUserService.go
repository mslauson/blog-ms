// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	generic "gitea.slauson.io/slausonio/go-libs/model/generic"
	gin "github.com/gin-gonic/gin"

	mock "github.com/stretchr/testify/mock"

	sioModel "gitea.slauson.io/slausonio/go-libs/model"
)

// IamUserService is an autogenerated mock type for the IamUserService type
type IamUserService struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: r, c
func (_m *IamUserService) CreateUser(r *sioModel.AwCreateUserRequest, c *gin.Context) *sioModel.AwUser {
	ret := _m.Called(r, c)

	var r0 *sioModel.AwUser
	if rf, ok := ret.Get(0).(func(*sioModel.AwCreateUserRequest, *gin.Context) *sioModel.AwUser); ok {
		r0 = rf(r, c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sioModel.AwUser)
		}
	}

	return r0
}

// DeleteUser provides a mock function with given fields: id, c
func (_m *IamUserService) DeleteUser(id string, c *gin.Context) generic.SuccessResponse {
	ret := _m.Called(id, c)

	var r0 generic.SuccessResponse
	if rf, ok := ret.Get(0).(func(string, *gin.Context) generic.SuccessResponse); ok {
		r0 = rf(id, c)
	} else {
		r0 = ret.Get(0).(generic.SuccessResponse)
	}

	return r0
}

// GetUserByID provides a mock function with given fields: id, c
func (_m *IamUserService) GetUserByID(id string, c *gin.Context) *sioModel.AwUser {
	ret := _m.Called(id, c)

	var r0 *sioModel.AwUser
	if rf, ok := ret.Get(0).(func(string, *gin.Context) *sioModel.AwUser); ok {
		r0 = rf(id, c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sioModel.AwUser)
		}
	}

	return r0
}

// ListUsers provides a mock function with given fields: c
func (_m *IamUserService) ListUsers(c *gin.Context) *sioModel.AwlistResponse {
	ret := _m.Called(c)

	var r0 *sioModel.AwlistResponse
	if rf, ok := ret.Get(0).(func(*gin.Context) *sioModel.AwlistResponse); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sioModel.AwlistResponse)
		}
	}

	return r0
}

// UpdateEmail provides a mock function with given fields: id, r, c
func (_m *IamUserService) UpdateEmail(id string, r *sioModel.UpdateEmailRequest, c *gin.Context) *sioModel.AwUser {
	ret := _m.Called(id, r, c)

	var r0 *sioModel.AwUser
	if rf, ok := ret.Get(0).(func(string, *sioModel.UpdateEmailRequest, *gin.Context) *sioModel.AwUser); ok {
		r0 = rf(id, r, c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sioModel.AwUser)
		}
	}

	return r0
}

// UpdatePassword provides a mock function with given fields: id, r, c
func (_m *IamUserService) UpdatePassword(id string, r *sioModel.UpdatePasswordRequest, c *gin.Context) *sioModel.AwUser {
	ret := _m.Called(id, r, c)

	var r0 *sioModel.AwUser
	if rf, ok := ret.Get(0).(func(string, *sioModel.UpdatePasswordRequest, *gin.Context) *sioModel.AwUser); ok {
		r0 = rf(id, r, c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sioModel.AwUser)
		}
	}

	return r0
}

// UpdatePhone provides a mock function with given fields: id, r, c
func (_m *IamUserService) UpdatePhone(id string, r *sioModel.UpdatePhoneRequest, c *gin.Context) *sioModel.AwUser {
	ret := _m.Called(id, r, c)

	var r0 *sioModel.AwUser
	if rf, ok := ret.Get(0).(func(string, *sioModel.UpdatePhoneRequest, *gin.Context) *sioModel.AwUser); ok {
		r0 = rf(id, r, c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sioModel.AwUser)
		}
	}

	return r0
}

type mockConstructorTestingTNewIamUserService interface {
	mock.TestingT
	Cleanup(func())
}

// NewIamUserService creates a new instance of IamUserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIamUserService(t mockConstructorTestingTNewIamUserService) *IamUserService {
	mock := &IamUserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
