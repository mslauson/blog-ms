// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	siogeneric "gitea.slauson.io/slausonio/go-types/siogeneric"
)

// IamUserService is an autogenerated mock type for the IamUserService type
type IamUserService struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: r
func (_m *IamUserService) CreateUser(r *siogeneric.AwCreateUserRequest) (*siogeneric.AwUser, error) {
	ret := _m.Called(r)

	var r0 *siogeneric.AwUser
	var r1 error
	if rf, ok := ret.Get(0).(func(*siogeneric.AwCreateUserRequest) (*siogeneric.AwUser, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(*siogeneric.AwCreateUserRequest) *siogeneric.AwUser); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*siogeneric.AwUser)
		}
	}

	if rf, ok := ret.Get(1).(func(*siogeneric.AwCreateUserRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUser provides a mock function with given fields: id
func (_m *IamUserService) DeleteUser(id string) (siogeneric.SuccessResponse, error) {
	ret := _m.Called(id)

	var r0 siogeneric.SuccessResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (siogeneric.SuccessResponse, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) siogeneric.SuccessResponse); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(siogeneric.SuccessResponse)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByID provides a mock function with given fields: id
func (_m *IamUserService) GetUserByID(id string) (*siogeneric.AwUser, error) {
	ret := _m.Called(id)

	var r0 *siogeneric.AwUser
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*siogeneric.AwUser, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *siogeneric.AwUser); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*siogeneric.AwUser)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUsers provides a mock function with given fields:
func (_m *IamUserService) ListUsers() (*siogeneric.AwlistResponse, error) {
	ret := _m.Called()

	var r0 *siogeneric.AwlistResponse
	var r1 error
	if rf, ok := ret.Get(0).(func() (*siogeneric.AwlistResponse, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *siogeneric.AwlistResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*siogeneric.AwlistResponse)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEmail provides a mock function with given fields: id, r
func (_m *IamUserService) UpdateEmail(id string, r *siogeneric.UpdateEmailRequest) (*siogeneric.AwUser, error) {
	ret := _m.Called(id, r)

	var r0 *siogeneric.AwUser
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *siogeneric.UpdateEmailRequest) (*siogeneric.AwUser, error)); ok {
		return rf(id, r)
	}
	if rf, ok := ret.Get(0).(func(string, *siogeneric.UpdateEmailRequest) *siogeneric.AwUser); ok {
		r0 = rf(id, r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*siogeneric.AwUser)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *siogeneric.UpdateEmailRequest) error); ok {
		r1 = rf(id, r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePassword provides a mock function with given fields: id, r
func (_m *IamUserService) UpdatePassword(id string, r *siogeneric.UpdatePasswordRequest) (*siogeneric.AwUser, error) {
	ret := _m.Called(id, r)

	var r0 *siogeneric.AwUser
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *siogeneric.UpdatePasswordRequest) (*siogeneric.AwUser, error)); ok {
		return rf(id, r)
	}
	if rf, ok := ret.Get(0).(func(string, *siogeneric.UpdatePasswordRequest) *siogeneric.AwUser); ok {
		r0 = rf(id, r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*siogeneric.AwUser)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *siogeneric.UpdatePasswordRequest) error); ok {
		r1 = rf(id, r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePhone provides a mock function with given fields: id, r
func (_m *IamUserService) UpdatePhone(id string, r *siogeneric.UpdatePhoneRequest) (*siogeneric.AwUser, error) {
	ret := _m.Called(id, r)

	var r0 *siogeneric.AwUser
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *siogeneric.UpdatePhoneRequest) (*siogeneric.AwUser, error)); ok {
		return rf(id, r)
	}
	if rf, ok := ret.Get(0).(func(string, *siogeneric.UpdatePhoneRequest) *siogeneric.AwUser); ok {
		r0 = rf(id, r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*siogeneric.AwUser)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *siogeneric.UpdatePhoneRequest) error); ok {
		r1 = rf(id, r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIamUserService interface {
	mock.TestingT
	Cleanup(func())
}

// NewIamUserService creates a new instance of IamUserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIamUserService(t mockConstructorTestingTNewIamUserService) *IamUserService {
	mock := &IamUserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
