// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	generic "gitea.slauson.io/slausonio/go-libs/model/generic"
	gin "github.com/gin-gonic/gin"

	mock "github.com/stretchr/testify/mock"

	sioModel "gitea.slauson.io/slausonio/go-libs/model"
)

// IamSessionService is an autogenerated mock type for the IamSessionService type
type IamSessionService struct {
	mock.Mock
}

// CreateEmailSession provides a mock function with given fields: r, c
func (_m *IamSessionService) CreateEmailSession(r *sioModel.AwEmailSessionRequest, c *gin.Context) *sioModel.AwSession {
	ret := _m.Called(r, c)

	var r0 *sioModel.AwSession
	if rf, ok := ret.Get(0).(func(*sioModel.AwEmailSessionRequest, *gin.Context) *sioModel.AwSession); ok {
		r0 = rf(r, c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sioModel.AwSession)
		}
	}

	return r0
}

// DeleteSession provides a mock function with given fields: sID, c
func (_m *IamSessionService) DeleteSession(sID string, c *gin.Context) generic.SuccessResponse {
	ret := _m.Called(sID, c)

	var r0 generic.SuccessResponse
	if rf, ok := ret.Get(0).(func(string, *gin.Context) generic.SuccessResponse); ok {
		r0 = rf(sID, c)
	} else {
		r0 = ret.Get(0).(generic.SuccessResponse)
	}

	return r0
}

type mockConstructorTestingTNewIamSessionService interface {
	mock.TestingT
	Cleanup(func())
}

// NewIamSessionService creates a new instance of IamSessionService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIamSessionService(t mockConstructorTestingTNewIamSessionService) *IamSessionService {
	mock := &IamSessionService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
