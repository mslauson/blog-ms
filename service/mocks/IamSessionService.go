// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	siogeneric "gitea.slauson.io/slausonio/go-types/siogeneric"
)

// IamSessionService is an autogenerated mock type for the IamSessionService type
type IamSessionService struct {
	mock.Mock
}

// CreateEmailSession provides a mock function with given fields: r
func (_m *IamSessionService) CreateEmailSession(r *siogeneric.AwEmailSessionRequest) (*siogeneric.AwSession, error) {
	ret := _m.Called(r)

	var r0 *siogeneric.AwSession
	var r1 error
	if rf, ok := ret.Get(0).(func(*siogeneric.AwEmailSessionRequest) (*siogeneric.AwSession, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(*siogeneric.AwEmailSessionRequest) *siogeneric.AwSession); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*siogeneric.AwSession)
		}
	}

	if rf, ok := ret.Get(1).(func(*siogeneric.AwEmailSessionRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSession provides a mock function with given fields: sID
func (_m *IamSessionService) DeleteSession(sID string) (siogeneric.SuccessResponse, error) {
	ret := _m.Called(sID)

	var r0 siogeneric.SuccessResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (siogeneric.SuccessResponse, error)); ok {
		return rf(sID)
	}
	if rf, ok := ret.Get(0).(func(string) siogeneric.SuccessResponse); ok {
		r0 = rf(sID)
	} else {
		r0 = ret.Get(0).(siogeneric.SuccessResponse)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(sID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIamSessionService interface {
	mock.TestingT
	Cleanup(func())
}

// NewIamSessionService creates a new instance of IamSessionService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIamSessionService(t mockConstructorTestingTNewIamSessionService) *IamSessionService {
	mock := &IamSessionService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
